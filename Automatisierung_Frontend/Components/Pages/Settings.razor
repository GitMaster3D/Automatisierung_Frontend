@page "/Settings/ip={ip}/name={name}"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations

<PageTitle> @name </PageTitle>

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />



<div class="container-fluid">
		<div class="row">
		<!-- Card -->
		<div class="card text-white w-100 text-start">
			<div class="card-body">

				<!-- card title -->
				<div class="d-flex justify-content-between">
					<h5 @onclick:stopPropagation class="card-title">
						<p class="card-text btn-outline text-start input-group-lg btn" style="font-size: 25px"> @name </p>
					</h5>
				</div>


				<!-- Watering Data -->
				<div class="mx-3">

					@if (targetWateringData.Mode == WateringData.WateringMode.Moisture)
					{
						<div class="d-flex justify-content-center">
							<MudPaper Elevation="3" Class="d-flex flex-column justify-center align-center"
									  Style="width: 15vw; height: 100px; border-radius: 5%; background-color: #f5f5f5;">

								<MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">
									Moisture
								</MudText>

								<MudText Typo="Typo.h2" Align="Align.Center" Color="Color.Primary">
									@targetWateringData.TargetMoisture_Percentage%
								</MudText>
							</MudPaper>
						</div>
					}

					@if (targetWateringData.Mode == WateringData.WateringMode.Amount)
					{
						<div class="d-flex justify-content-center">
							<MudPaper Elevation="3" Class="d-flex flex-column justify-center align-center" Style="width: 15vw; height: 100px; border-radius: 5%; background-color: #f5f5f5;">
								<MudText Typo="Typo.h2" Align="Align.Center" Color="Color.Primary">
									@(targetWateringData.TargetDailyWater_Liters)l/day
								</MudText>
							</MudPaper>
						</div>
						<br />


						<div class="container-fluid">
							<div class="d-flex flex-row justify-content-around">

								@for (int j = 0; j < targetWateringData.DailyWateringTimes.Count; j++)
								{
									int jCopy = j;
									TimeSpan? time = @targetWateringData.DailyWateringTimes[jCopy]!;

									<div class="d-flex justify-content-around">
										<MudPaper Elevation="3" Class="d-flex justify-center align-center" Style="width: 6vw; height: 70px; border-radius: 5%; background-color: #f5f5f5;">
											<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Surface">
												@string.Format("{0:00}:{1:00}", time.Value.Hours, time.Value.Minutes)
											</MudText>
										</MudPaper>
									</div>
								}
							</div>
						</div>
						<br />
					}

				</div>


				<!-- Ip Label -->
				<label @onclick:stopPropagation class="text-secondary mx-3">
					Ip: @ip
				</label>

			</div>
		</div>
		</div>
</div>



<EditForm Model="@targetWateringData" OnValidSubmit="SubmitDataUpdate" FormName="wateringData" Context="WateringDataEditForm">
	<label class="col-form-label-lg text-primary"> Settings </label>



	<!-- Mode Dropdown -->
	<div class="m-1 my-5">
		<label>Watering Mode</label>
		<Dropdown TItem="WateringData.WateringMode" OnSelected="@OnModeSelected">
			<InitialTip>Select Mode</InitialTip>
			<ChildContent>
				<DropdownListItem Item="@WateringData.WateringMode.Moisture">Moisture</DropdownListItem>
				<DropdownListItem Item="@WateringData.WateringMode.Amount">Amount</DropdownListItem>
			</ChildContent>
		</Dropdown>
	</div>
	<div class="dropdown-divider"></div>


	@if (targetWateringData.Mode == WateringData.WateringMode.Moisture)
	{		
		<!-- Moisture Percentage -->
		<div class="m-1 my-5">
			<label for="input">Target Moisture Percentage</label>
			<input id="input" @bind="targetWateringData.TargetMoisture_Percentage" class="form-control" />
			<span class="text-danger">@validationMessages["Validate"]</span>

		</div>
		<button type="submit" class="btn btn-primary m-1">Submit</button>
	}
	else if (targetWateringData.Mode == WateringData.WateringMode.Amount)
	{
		<!-- Daily Amount -->
		<div class="m-1 my-5">
			<label for="input">Daily Amount</label>
			<input id="input" @bind="targetWateringData.TargetDailyWater_Liters" class="form-control" />
			<span class="text-danger">@validationMessages["Validate"]</span>

		</div>
		<div class="dropdown-divider"></div>


		<!-- Daily Times -->
		<div class="m-1 my-5">

			<button class="btn btn-outline-primary" @onclick="AddTime"> <i class="bi bi-plus-circle"></i> Add </button>
			<button class="btn btn-outline-danger" @onclick="RemoveTime"> <i class="bi bi-dash-circle"></i> Remove Last</button>

			@for (int i = 0; i < targetWateringData.DailyWateringTimes.Count; i++)
			{
				<!-- Needed for reasons -->
				var icopy = i;

				<MudTimePicker Class="m-1 my-4" Label="Time" PickerVariant="PickerVariant.Dialog" MinuteSelectionStep="5" @bind-Time="targetWateringData.DailyWateringTimes[icopy]" />
			}
		</div>
		<button type="submit" class="btn btn-primary m-1">Submit</button>
	}
</EditForm>

@code
{
	[Parameter]
	public string ip { get; set; } = "";
	[Parameter]
	public string name { get; set; } = "";

	WateringData targetWateringData = new();
	public Dictionary<string, string> validationMessages = new()
	{
		{ "Validate", "" }
	};


	#region MODE
	private void OnModeSelected(WateringData.WateringMode mode)
	{
		targetWateringData.Mode = mode;
	}
	#endregion

	#region TIMES
	private void AddTime()
	{
		targetWateringData.DailyWateringTimes.Add(new TimeSpan(0, 0, 0));
	}

	private void RemoveTime()
	{
		targetWateringData.DailyWateringTimes.RemoveAt(targetWateringData.DailyWateringTimes.Count - 1);
	}
	#endregion

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}


	#region SUBMIT
	private void SubmitDataUpdate()
	{
		if (!targetWateringData.ValidateData())
		{
			validationMessages["Validate"] = "Invalid Settings!";
			return;
		}
		else
		{
			validationMessages["Validate"] = "";
		}
	}


	private void SetData()
	{
		MessageConfigurator.UpdateWateringData(0, targetWateringData);
	}
	#endregion
}