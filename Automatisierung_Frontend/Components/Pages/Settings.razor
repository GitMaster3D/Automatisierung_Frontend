@page "/Settings/ip={ip}/name={name}"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations

<PageTitle> @name </PageTitle>

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />



<div class="container-fluid">
		<div class="row">
			<!-- Card -->
			<div class="card w-100 mb-3 text-start">
				<div class="card-body">

					<!-- card title and Remove Button -->
					<div class="d-flex justify-content-between">
						<h5  class="card-title">
							@name
						</h5>

						<!-- Ip Label -->
						<label class="text-secondary mx-3">
							Ip: @ip
						</label>
					</div>

					<br />
					<br />
					<table>
						<tbody>
						<!-- Moisture Mode Display -->
						@if (targetWateringData.Mode == WateringData.WateringMode.Moisture)
						{
						<tr>
							<th>
								Moisture: @targetWateringData.TargetMoisture_Percentage%
							</th>
						</tr>
						}

						<!-- Amount Mode Display -->
						@if (targetWateringData.Mode == WateringData.WateringMode.Amount)
						{
							<tr>
								<th>
									Daily Litres: @targetWateringData.TargetDailyWater_Liters l
								</th>
							</tr>

							<tr>							
								<th>
									<tr> Times: </tr>
									@foreach(var time in targetWateringData.DailyWateringTimes)
									{
										<tr> &emsp; @time.ToString()  </tr>
									}
								</th>
							</tr>
						}

						<tr>
							<th>
								Mode: @targetWateringData.Mode
							</th>
						</tr>
					</tbody>
					</table>
				</div>
			</div>
		</div>
</div>



<EditForm Model="@targetWateringData" OnValidSubmit="SubmitDataUpdate" FormName="wateringData" Context="WateringDataEditForm">
	<label class="col-form-label-lg text-primary"> Settings </label>



	<!-- Mode Dropdown -->
	<div class="m-1 my-5">
		<label>Watering Mode</label>
		<Dropdown TItem="WateringData.WateringMode" OnSelected="@OnModeSelected">
			<InitialTip>Select Mode</InitialTip>
			<ChildContent>
				<DropdownListItem Item="@WateringData.WateringMode.Moisture">Moisture</DropdownListItem>
				<DropdownListItem Item="@WateringData.WateringMode.Amount">Amount</DropdownListItem>
			</ChildContent>
		</Dropdown>
	</div>
	<div class="dropdown-divider"></div>


	@if (targetWateringData.Mode == WateringData.WateringMode.Moisture)
	{		
		<!-- Moisture Percentage -->
		<div class="m-1 my-5">
			<label for="input">Target Moisture Percentage</label>
			<input id="input" @bind="targetWateringData.TargetMoisture_Percentage" class="form-control" />
			<span class="text-danger">@validationMessages["Validate"]</span>

		</div>
		<button type="submit" class="btn btn-primary m-1">Submit</button>
	}
	else if (targetWateringData.Mode == WateringData.WateringMode.Amount)
	{
		<!-- Daily Amount -->
		<div class="m-1 my-5">
			<label for="input">Daily Amount</label>
			<input id="input" @bind="targetWateringData.TargetDailyWater_Liters" class="form-control" />
			<span class="text-danger">@validationMessages["Validate"]</span>

		</div>
		<div class="dropdown-divider"></div>


		<!-- Daily Times -->
		<div class="m-1 my-5">

			<button class="btn" @onclick="AddTime"> <i class="bi bi-plus-circle"></i> Add </button>
			<button class="btn" @onclick="RemoveTime"> <i class="bi bi-dash-circle"></i> Remove Last</button>

			@for (int i = 0; i < targetWateringData.DailyWateringTimes.Count; i++)
			{
				<!-- Needed for reasons -->
				var icopy = i;

				<MudTimePicker Class="m-1 my-4" Label="Time"  Editable="true" @bind-Time="targetWateringData.DailyWateringTimes[icopy]" />
			}
		</div>
		<button type="submit" class="btn btn-primary m-1">Submit</button>
	}
</EditForm>

@code
{



	[Parameter]
	public string ip { get; set; } = "";
	[Parameter]
	public string name { get; set; } = "";

	WateringData targetWateringData = new();
	public Dictionary<string, string> validationMessages = new()
	{
		{ "Validate", "" }
	};


	#region MODE
	private void OnModeSelected(WateringData.WateringMode mode)
	{
		targetWateringData.Mode = mode;
	}
	#endregion

	#region TIMES
	private void AddTime()
	{
		targetWateringData.DailyWateringTimes.Add(new TimeSpan(0, 0, 0));
	}

	private void RemoveTime()
	{
		targetWateringData.DailyWateringTimes.RemoveAt(targetWateringData.DailyWateringTimes.Count - 1);
	}
	#endregion

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}


	#region SUBMIT
	private void SubmitDataUpdate()
	{
		if (!targetWateringData.ValidateData())
		{
			validationMessages["Validate"] = "Invalid Settings!";
			return;
		}
		else
		{
			validationMessages["Validate"] = "";
		}
	}


	private void SetData()
	{
		MessageConfigurator.UpdateWateringData(0, targetWateringData);
	}
	#endregion
}