@rendermode InteractiveServer

@page "/"
@using Newtonsoft.Json
@using static Automatisierung_Frontend.Components.Pages.Available



<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />


<div class="container-fluid">
    <div class="row">
        @for (int i = 0; i < connections.Length; i++)
        {
            int iCopy = i;


            <div class="col-md-6 mb-4">
                <!-- Card -->
                <div class="card text-white w-100 text-start">
                    <div class="card-body">

                        <!-- card title -->
                        <div class="d-flex justify-content-between">
                            <h5 @onclick:stopPropagation class="card-title">
                                <p class="card-text btn-outline text-start input-group-lg btn" style="font-size: 25px"> @connections[iCopy].name </p>
                            </h5>
                        </div>

                        @if (connections[iCopy].reachability == 0)
                        {
                            <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">
                                <span> Connecting... </span>
                            </MudAlert>
                        }
                        @if (connections[iCopy].reachability == 1)
                        {
                            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">
                                <i class="bi bi-wifi-off"></i>
                                <span> Unable To Connect </span>
                            </MudAlert>                            
                        }
                        else
                        {
                            <!-- Watering Data -->
                            <div class="mx-3">

                                @if (wateringData[iCopy].Mode == WateringData.WateringMode.Moisture)
                                {
                                    <div class="d-flex justify-content-center">
                                        <MudPaper Elevation="3" Class="d-flex flex-column justify-center align-center"
                                                  Style="width: 10vw; height: 80px; border-radius: 5%; background-color: #f5f5f5;">

                                            <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">
                                                Moisture
                                            </MudText>

                                            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">
                                                @wateringData[iCopy].TargetMoisture_Percentage%
                                            </MudText>
                                        </MudPaper>
                                    </div>
                                }

                                @if (wateringData[iCopy].Mode == WateringData.WateringMode.Amount)
                                {
                                    <div class="d-flex justify-content-center">
                                        <MudPaper Elevation="3" Class="d-flex flex-column justify-center align-center" Style="width: 10vw; height: 80px; border-radius: 5%; background-color: #f5f5f5;">
                                            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">
                                                @(wateringData[iCopy].TargetDailyWater_Liters)l/day
                                            </MudText>
                                        </MudPaper>
                                    </div>
                                    <br />


                                    <MudContainer MaxWidth="MaxWidth.Small" class="container-fluid"> 
                                        <div class="row">



                                            <!-- Display Times -->
                                            <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal">
                                                @for (int j = 0; j < wateringData[iCopy].DailyWateringTimes.Count; j++)
                                                {
                                                    int jCopy = j;
                                                    TimeSpan? time = @wateringData[iCopy].DailyWateringTimes[jCopy]!;

                                                    <MudTimelineItem Color="Color.Primary">
                                                        <MudAlert Severity="Severity.Normal" ContentAlignment="HorizontalAlignment.Center">
                                                            @string.Format("{0:00}:{1:00}", time.Value.Hours, time.Value.Minutes)
                                                        </MudAlert>
                                                    </MudTimelineItem>
                                                }
                                            </MudTimeline>
                                        </div>
                                    </MudContainer>
                                    <br />
                                }

                            </div>

                        }



                        <!-- Ip Label -->
                        <label @onclick:stopPropagation class="text-secondary mx-3">
                            Ip: @connections[iCopy].ip
                        </label>

                    </div>
                </div>
            </div>
        }
    </div>
</div>



@code
{
    ConnectionObject[] connections;
    WateringData[] wateringData;



    protected override void OnInitialized()
    {
        connections = ConnectionObject.LoadAll();
        wateringData = GetWateringdata();

        LoadWateringData();
    }

    private void LoadWateringData()
    {
        for (int i = 0; i < connections.Length; i++)
        {
            GetData(i);
        }
    }


    private async void GetData(int index)
    {
        ConnectionObject obj = connections[index];
        try
        {

            Api_Connection.API_Connection.SetHost(obj.ip, 8000);
            var response = await Api_Connection.API_Connection.Get("/getwateringdata");
            var cleaned = response.data.Substring(1, response.data.Length - 2).Replace("\\", "");


            wateringData[index] = JsonConvert.DeserializeObject<WateringData>(cleaned);




            obj.reachability = 2;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            obj.reachability = 1;
        }

        Console.WriteLine("Index: " + index + " State: " + connections[index].reachability);
        StateHasChanged();
    }

    /// <summary>
    /// TODO: Make this work
    /// </summary>
    /// <returns></returns>
    private WateringData[] GetWateringdata()
    {
        var arr = new WateringData[connections.Length];
        for (int i = 0; i < arr.Length; i++)
        {
            arr[i] = new WateringData();
        }

        return arr;
    }
}