@page "/available"
@rendermode InteractiveServer

<PageTitle>Configure</PageTitle>

@using Api_Connection
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@using System.Net
@using System.Net.Sockets
@using System.Text
@inject ILogger<Available> Logger
@inject NavigationManager NavManager
@inject IDialogService DialogService

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />

<h1>Overview</h1>

@if (ipAmount < 0)
{
    <p><em>Nothing Found...</em></p>
}
else
{
    <div class="container-fluid">
        @foreach (var api in connections)
        {
            <div class="row">
                <!-- Card -->
                <div class="card text-white w-100 mb-3 text-start">
                    <div class="card-body" @onclick="() => OpenSettings(api)">

                        <!-- card title and Remove Button -->
                        <div class="d-flex justify-content-between">
                            <h5 @onclick:stopPropagation class="card-title">
                                <input class="card-text btn-outline text-start input-group-lg btn" style="font-size: 25px" @bind-value="api.name"/>
                            </h5>

                            <button class="btn btn-outline-danger" @onclick:stopPropagation @onclick="() => RemoveIp(api)">
                                <div> REMOVE </div>
                            </button>
                        </div>


                        <!-- Ip Label -->
                        <label @onclick:stopPropagation class="text-secondary mx-3">
                            Ip: @api.ip
                        </label>

                    </div>
                </div>
            </div>
        }
    </div>
}

<br />
<br />
<EditForm Model="@ipInput" OnValidSubmit="@HandleIpInputSubmit">

    <label class="col-form-label-lg text-primary"> Target Ip </label>


    <div class="m-1">
        <label for="input">Ip:</label>
        <input id="input" @bind="ipInput.ip" class="form-control" />
        <span class="text-danger">@validationMessages["Ip"]</span>
    </div>


    <button type="submit" class="btn btn-primary m-1">Submit</button>
    <button type="button" @onclick="FindRaspberryIp" class="btn btn-primary"> Detect </button>
</EditForm>

<br />
<br />



@code {
    ConnectionObject[] connections { get { return connections__.ToArray(); } set { connections__ = value.ToList(); ipAmount = connections__.Count; } }
    List<ConnectionObject> connections__;
    int ipAmount = -1;
    IpInput ipInput = new();
    private Dictionary<string, string> validationMessages = new Dictionary<string, string> 
    { 
        { "Ip", "" }
    };


    private void OpenSettings(ConnectionObject obj)
    {
        NavManager.NavigateTo($"/Settings/ip={obj.ip}/name={obj.name}");
    }



    #region Connection
    public class ConnectionObject
    {
        public string ip = "";
        [JsonIgnore] public string name { get { return name_; } set { name_ = value; OnNameChanged(); }}
        const string folderName = "ConnectionObjects";
        [JsonIgnore] public int reachability;


        [JsonProperty] private string name_;


        private void OnNameChanged()
        {
            Store();
        }

        public void Store()
        {
            FileManager.StoreAsJson(this, this.ip, folderName);
        }


        public void Delete()
        {
            FileManager.Delete(this.ip, "ConnectionObjects");
        }


        public static ConnectionObject[] LoadAll()
        {
            string[] fileNames = FileManager.GetAllFilenames(folderName);
            ConnectionObject[] objects = new ConnectionObject[fileNames.Length];

            for (int i = 0; i < fileNames.Length; i++)
            {
                objects[i] = Load(fileNames[i]);
            }

            return objects;
        }

        public static ConnectionObject Load(string name)
        {
            return (ConnectionObject)FileManager.GetObject<ConnectionObject>(name, folderName);
        }
    }
    #endregion

    #region Input
    class IpInput
    {
        public string ip { get; set; } = "";


        public bool IsValidIp()
        {
            const string ValidIpRegexPattern = @"^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)(\.(?!$)|$)){4}$";

            if (ip.Length == 0) return false;
            return Regex.IsMatch(ip, ValidIpRegexPattern);
        }
    }

    private void RemoveIp(ConnectionObject obj)
    {
        connections__.Remove(obj);
        obj.Delete();
    }
    #endregion

    bool isSearching = false;
    private async void FindRaspberryIp()
    {
        if (isSearching) return;
        isSearching = true;

        CancellationTokenSource cancellationTokenSource = new();
        OpenCancelDialog(cancellationTokenSource);

        cancellationTokenSource.CancelAfter(10000);
        try
        {
            await Task.Run(() => ListenForIPBroadcast(cancellationTokenSource.Token));
        }
        catch
        {
            Console.WriteLine("Cancelled");
        }

    }

    /// <summary>
    /// Shows a Cancel Dialog that can be used to 
    /// Cancel the Search 
    /// </summary>
    private void OpenCancelDialog(CancellationTokenSource cancellationTokenSource)
    {
        var parameters = new DialogParameters<CancelDialog>
        {
            { x => x.cancellationTokenSource, cancellationTokenSource },
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, NoHeader = true };

        DialogService.ShowAsync<CancelDialog>("", parameters, options);
    }


    /// <summary>
    /// Keine sicherheitslücken hier zu erkennen, das
    /// ist sicher und gut und gesund
    /// </summary>
    private async void ListenForIPBroadcast(CancellationToken ct)
    {
        try
        {
            IpInput foundIp = new();
            var remoteEP = new IPEndPoint(IPAddress.Any, 1234);
            using (UdpClient udpServer = new UdpClient(remoteEP))
            {
                while (true)
                {
                    var data = await udpServer.ReceiveAsync(ct);
                    foundIp.ip = Encoding.UTF8.GetString(data.Buffer);


                    if (foundIp.IsValidIp())
                    {
                        udpServer.Close();
                        break;
                    }
                }            
            }

            // Input the recieved Ip
            ipInput = foundIp;
            HandleIpInputSubmit();        

        }
        catch
        {
            Console.WriteLine("Cancelled");
            isSearching = false;
        }
    }


    Semaphore handleInputSemaphore = new(1, 1);
    private void HandleIpInputSubmit()
    {
        handleInputSemaphore.WaitOne();

        if (!ipInput.IsValidIp())
        {
            validationMessages["Ip"] = "Invalid Ipv4";
            return;
        }


        ConnectionObject obj = new();
        obj.ip = ipInput.ip;
        obj.name = "New Connection";
        connections = connections.Concat(new ConnectionObject[] { obj }).ToArray();

        handleInputSemaphore.Release();
    }


    protected override void OnInitialized()
    {
        connections = ConnectionObject.LoadAll();
    }


    // Test code, To be removed
    private void TestSendProgram()
    {
        API_Connection.SetHost("10.1.182.31", 8000);

        var data = new WateringData();
        data.UseDailyAmount(0.3f);
        data.SetDailyWateringTimes(new TimeSpan?[] { new TimeSpan(12, 30, 0), new TimeSpan(22, 0, 0) });
        data.ValidateData();

        MessageConfigurator.UpdateWateringData(0, data);
    }
}